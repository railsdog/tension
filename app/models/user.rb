require 'digest/sha1'

class User < ActiveRecord::Base
  before_destroy :update_extensions
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    return true if @_list.include?("admin")
    (@_list.include?(role_in_question.to_s) )
  end
  # ---------------------------------------
  
  
  include Authentication
  include Authentication::ByPassword
  include Authentication::ByCookieToken
  include Authorization::AasmRoles

  validates_presence_of     :name
  validates_length_of       :name,    :within => 3..40
  
  validates_presence_of     :login
  validates_length_of       :login,    :within => 3..40
  validates_uniqueness_of   :login
  validates_format_of       :login,    :with => Authentication.login_regex, :message => Authentication.bad_login_message

  validates_format_of       :name,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
  validates_length_of       :name,     :maximum => 100

  validates_presence_of     :email
  validates_length_of       :email,    :within => 6..100 #r@a.wk
  validates_uniqueness_of   :email
  validates_format_of       :email,    :with => Authentication.email_regex, :message => Authentication.bad_email_message

  

  # HACK HACK HACK -- how to do attr_accessible from here?
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :name, :password, :password_confirmation, :role_ids


  has_many :extensions, :dependent => :nullify



  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  #
  # uff.  this is really an authorization, not authentication routine.  
  # We really need a Dispatch Chain here or something.
  # This will also let us return a human error message.
  #
  def self.authenticate(login, password)
    return nil if login.blank? || password.blank?
    u = find_in_state :first, :active, :conditions => {:login => login.downcase} # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  def login=(value)
    write_attribute :login, (value ? value.downcase : nil)
  end

  def email=(value)
    write_attribute :email, (value ? value.downcase : nil)
  end

  def deliver_password_reset_instructions!
    reset_perishable_token!
    UserMailer.deliver_password_reset_instructions(self)
  end


  protected
    
  def make_activation_code
    self.deleted_at = nil
    self.activation_code = self.class.make_token
  end

  # If user is about to be delated, set author name on all his extensions, so it's preserved
  def update_extensions
    extensions.each do |e|
      e.update_attribute(:author_name, e.author_name.blank? ? self.name : e.author_name)
    end
  end

  # Resets the perishable token to a random friendly token.
  def reset_perishable_token
    self.perishable_token = self.class.make_token
  end

  # Same as reset_perishable_token, but then saves the record afterwards.
  def reset_perishable_token!
    update_attribute(:perishable_token, reset_perishable_token)
  end


  # Use this methdo to find a record with a perishable token. This method does 2 things for you:
  #
  # 1. It ignores blank tokens
  # 2. It enforces the perishable_token_valid_for configuration option.
  #
  # If you want to use a different timeout value, just pass it as the second parameter:
  #
  #   User.find_using_perishable_token(token, 1.hour)
  def self.find_using_perishable_token(token, age = 10.minutes)
    return if token.blank?
    age = age.to_i

    conditions_sql = "perishable_token = ?"
    conditions_subs = [token]

    if column_names.include?("updated_at") && age > 0
      conditions_sql += " and updated_at > ?"
      conditions_subs << age.seconds.ago
    end

    find(:first, :conditions => [conditions_sql, *conditions_subs])
  end
end
